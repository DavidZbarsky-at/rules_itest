load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_itest//:itest.bzl", "itest_service")

not_windows = select({
    "@platforms//os:windows": ["@platforms//:incompatible"],
    "//conditions:default": [],
})

java_binary(
    name = "bin",
    # TODO(zbarsky): Ideally the maven rules would generate these data deps, but
    # when I tried adding them there they didn't seem to get passed through to the runfiles.
    data = select({
        "@bazel_tools//src/conditions:darwin_arm64": ["@maven//:libsqlite4java-osx-aarch64.dylib"],
        "@bazel_tools//src/conditions:darwin_x86_64": ["@maven//:libsqlite4java-osx.dylib"],
        "@bazel_tools//src/conditions:linux_aarch64": ["@maven//:libsqlite4java-linux-amd64.so"],
        "@bazel_tools//src/conditions:linux_x86_64": ["@maven//:libsqlite4java-linux-i386.so"],
    }),
    jvm_flags = [
        "-Djava.library.path=$$JAVA_RUNFILES/rules_jvm_external~override~maven~maven",
    ],
    main_class = "com.amazonaws.services.dynamodbv2.local.main.ServerRunner",
    runtime_deps = [
        "@maven//:com_amazonaws_DynamoDBLocal",
    ],
    target_compatible_with = not_windows,
)

itest_service(
    name = "dynamodb",
    args = [
        "--dbPath",
        "$${TMPDIR}",
        "--port",
        "$${PORT}",
    ],
    autoassign_port = True,
    exe = ":bin",
    health_check = ":health_check",
    target_compatible_with = not_windows,
)

go_library(
    name = "dynamodb_lib",
    srcs = ["health_check.go"],
    importpath = "rules_itest/examples/dynamodb",
    visibility = ["//visibility:private"],
    deps = [
        "@com_github_aws_aws_sdk_go_v2//aws",
        "@com_github_aws_aws_sdk_go_v2_service_dynamodb//:dynamodb",
    ],
)

go_binary(
    name = "health_check",
    embed = [":dynamodb_lib"],
)
